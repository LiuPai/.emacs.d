;;; init.el --- Summary
;;; Commentary:
;;; Code:

(progn
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.milkbox.net/packages/"))
  (add-to-list 'package-archives
	       '("marmalade" . "http://marmalade-repo.org/packages/")
	       t)
  (package-initialize))

(defun install-packages(list)
  (let (value)
    (dolist (package list value)
      (if (package-installed-p package)
          (print package)
        (package-install package)))))

(unless (package-installed-p 'yasnippet)
  (package-refresh-contents)
  (let (packages-to-install)
    (setq packages-to-install
	  '(ac-c-headers ac-dabbrev ac-etags ac-ispell ac-js2 ac-python ace-jump-buffer ace-jump-mode ace-jump-zap ace-link ace-window aes alert anyins anzu ascope auto-complete auto-complete-c-headers auto-complete-clang-async autodisass-llvm-bitcode auto-indent-mode awk-it backup-each-save bbdb bbdb-vcard bind-key bookmark+ browse-kill-ring buffer-move c-eldoc cal-china-x change-inner cmake-ide cmake-mode cmake-project code-headers codic color-identifiers-mode command-frequency comment-dwim-2  concurrent css-eldoc dash db db-pg deferreddictionary dired+ dired-single direx dired-sort dired-subtree disaster ecb el-autoyas eldoc-extension emacsql emms emms-mark-ext engine-mode epl expand-region fasm-mode fic-mode finalize find-file-in-project fixme-mode flycheck flycheck-color-mode-line flycheck-google-cpplint flycheck-pos-tip font-utils free-keys ggtags gntp gnuplot gnuplot-mode go-autocomplete go-direx go-eldoc google-c-style google-translate go-projectile go-snippets goto-chg hide-comnt hide-lines highlight-indentation highlight-stages hlinum htmlize http-twiddle icomplete+ idomenu init-loader jabber js2-mode json keyfreq  keymap-utils kfg kv link lispxmp list-utils log4e macro-utils magit magit-filenotify magit-find-file magit-push-remote magit-topgit margo markdown-mode memory-usage minibuffer-complete-cycle mkdown multiple-cursors multi-term navi2ch navorski nodejs noflet org org-ac org-magit owdriver paradox paredit paredit-everywhere pcache persistent-soft pg pkgbuild-mode pkg-info popup project projectile python-mode pyvenv rainbow-delimiters s simple-httpd skewer-mode smart-cursor-color smartrep sos sqlite syslog-mode tabulated-list tomatinho ucs-utils undo-tree unicode-fonts uuidgen visual-regexp vlf w3m wc-goal-mode yas-jit yasnippet yaxception))
    (install-packages packages-to-install)))

;; init-loader
(require 'kfg)
(require 'init-loader)
(init-loader-load "~/.emacs.d/load.d")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-dictionary-files (quote ("~/.emacs.d/dict")))
 '(ac-ispell-requires 4)
 '(auto-save-interval 300)
 '(auto-save-timeout 1800)
 '(backup-by-copying t)
 '(backup-directory-alist (quote (("." . "~/.emacs.d/saves/"))))
 '(browse-url-browser-function (quote w3m))
 '(c-default-style (quote ((c-mode . "linux") (java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
 '(calendar-chinese-all-holidays-flag t)
 '(calendar-latitude [35 45 north])
 '(calendar-longitude [115 1 east])
 '(column-number-mode t)
 '(completion-styles (quote (basic partial-completion emacs22 initials)))
 '(debug-on-error t)
 '(delete-old-versions t)
 '(desktop-base-file-name "emacs.env")
 '(desktop-base-lock-name "emacs.env.lock")
 '(desktop-missing-file-warning t)
 '(desktop-path (quote ("~/.emacs.d/")))
 '(desktop-save (quote ask-if-new))
 '(diary-file "~/.emacs.d/diary")
 '(dired-listing-switches "-alh")
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote (("/" "/"))))
 '(echo-keystrokes 0.1)
 '(ediff-merge-split-window-function (quote split-window-vertically))
 '(emms-browser-default-browse-type (quote info-album))
 '(emms-lyrics-dir "~/.emacs.d/emms/lyrics/")
 '(emms-lyrics-display-on-minibuffer t)
 '(emms-lyrics-scroll-p nil)
 '(emms-netease-quality (quote hMusic))
 '(emms-player-list (quote (emms-player-mplayer)))
 '(emms-player-mplayer (quote (*player* (start . emms-player-mplayer-start) (stop . emms-player-mplayer-stop) (playablep . emms-player-mplayer-playable-p) (regex . "\\`\\(http\\|mms\\)://\\|\\.\\([Oo][Gg][Gg]\\|[Mm][Pp]3\\|[Ww][Aa][Vv]\\|[Mm][Pp][Gg]\\|[Mm][Pp][Ee][Gg]\\|[Ww][Mm][Vv]\\|[Ww][Mm][Aa]\\|[Mm][Oo][Vv]\\|[Aa][Vv][Ii]\\|[Dd][Ii][Vv][Xx]\\|[Oo][Gg][Mm]\\|[Oo][Gg][Vv]\\|[Aa][Ss][Ff]\\|[Mm][Kk][Vv]\\|[Rr][Mm]\\|[Rr][Mm][Vv][Bb]\\|[Mm][Pp]4\\|[Ff][Ll][Aa][Cc]\\|[Vv][Oo][Bb]\\|[Mm]4[Aa]\\|[Aa][Pp][Ee]\\|[Ff][Ll][Vv]\\|[Ww][Ee][Bb][Mm]\\)\\'") (pause . emms-player-mplayer-pause) (resume) (seek . emms-player-mplayer-seek) (seek-to . emms-player-mplayer-seek-to))))
 '(emms-player-mplayer-command-name "mplayer")
 '(emms-player-mplayer-parameters (quote ("-slave" "-quiet" "-really-quiet" "--prefer-ipv4")))
 '(enable-recursive-minibuffers t)
 '(engint-mode t)
 '(epa-file-select-keys nil)
 '(exec-path (quote ("/usr/bin" "/bin" "/usr/local/bin" "/opt/local/bin" "/usr/sbin" "/sbin" "/usr/local/sbin")))
 '(fic-highlighted-words (quote ("FIXME" "TODO" "BUG" "KLUDGE" "ERROR" "FAILED")))
 '(flycheck-display-errors-function (function flycheck-pos-tip-error-messages))
 '(flycheck-mode-line-lighter " C" t)
 '(flycheck-pos-tip-timeout 10)
 '(ggtags-use-idutils t)
 '(global-color-identifiers-mode t)
 '(global-undo-tree-mode t)
 '(gnus-select-method (quote (nntp "news.gmane.org")))
 '(history-delete-duplicates t)
 '(history-length 2048)
 '(icomplete-mode t)
 '(ido-confirm-unique-completion t)
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-ignore-buffers (quote ("\\`" "^*Back" "^*Complie-Log" "^*Completion" "^*Ido")))
 '(ido-max-prospects 6)
 '(ido-mode (quote both) nil (ido))
 '(ido-save-directory-list-file "~/.emacs.d/ido-last")
 '(ido-use-filename-at-point nil)
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(ispell-dictionary "en_US")
 '(ispell-extra-args (quote ("--sug-mode=ultra")))
 '(jabber-alert-message-hooks (quote (jabber-message-wave jabber-message-switch jabber-message-display jabber-message-scroll)))
 '(jabber-alert-message-wave "/usr/share/sounds/os/message.wav")
 '(jabber-auto-reconnect t)
 '(jabber-backlog-days 30)
 '(jabber-backlog-number 102400)
 '(jabber-chat-delayed-time-format "%Y-%m-%d %H:%M:%S")
 '(jabber-chat-time-format "%H:%M:%S")
 '(jabber-connection-ssl-program nil)
 '(jabber-history-enabled t)
 '(jabber-history-muc-enabled t)
 '(jabber-history-size-limit 10240)
 '(jabber-muc-colorize-local t)
 '(jabber-roster-show-bindings nil)
 '(jabber-socks5-proxies (quote ("127.0.0.1:9050")))
 '(jabber-use-global-history nil)
 '(kept-new-versions 6)
 '(linum-format "%4d")
 '(markdown-command "markdown_py")
 '(menu-bar-mode nil)
 '(message-log-max 10240)
 '(minibuffer-auto-raise t)
 '(minibuffer-electric-default-mode nil)
 '(mode-line-format (quote ("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-buffer-identification " " mode-line-position smartrep-mode-line-string (vc-mode vc-mode) " " mode-line-modes mode-line-misc-info mode-line-end-spaces)))
 '(org-agenda-files "~/.emacs.d/agenda_files")
 '(org-agenda-include-diary t)
 '(org-agenda-restore-windows-after-quit t)
 '(org-agenda-skip-archived-trees nil)
 '(org-agenda-skip-deadline-prewarning-if-scheduled t)
 '(org-archive-location "~/.emacs.d/org/archive.org::* From %s")
 '(org-babel-load-languages (quote ((org . t) (sh . t) (emacs-lisp . t) (C . t) (go . t) (python . t) (haskell . t))))
 '(org-capture-templates (quote (("t" "Todo" entry (file+headline "~/.emacs.d/org/notes.org" "Tasks") "* TODO %?
 %i 
 %a :CREATED_AT: %U:END:" :prepend t) ("a" "Simple Note" entry (file "~/.emacs.d/org/notes.org") "%[pathname] 
%T 
 %i") ("j" "Journal" entry (file+datetree "~/.emacs.d/org/notes.org") "* %?
Entered on %U
 %i
  %a"))))
 '(org-catch-invisible-edits (quote smart))
 '(org-clock-continuously t)
 '(org-clock-idle-time 10)
 '(org-clock-persist t)
 '(org-clock-report-include-clocking-task t)
 '(org-crypt-disable-auto-save (quote encrypt))
 '(org-crypt-key "Liu Pai")
 '(org-crypt-tag-matcher "CRYPT")
 '(org-ctags-open-link-functions nil)
 '(org-default-notes-file "(concat org-directory notes.org)")
 '(org-default-priority 67)
 '(org-directory "~/.emacs.d/org")
 '(org-display-custom-times t)
 '(org-display-internal-link-with-indirect-buffer t)
 '(org-enforce-todo-dependencies t)
 '(org-faces-easy-properties (quote ((todo . :foreground) (tag . :background) (priority . :foreground))))
 '(org-id-link-to-org-use-id (quote create-if-interactive-and-no-custom-id))
 '(org-link-abbrev-alist (quote (("google" . "http://www.google.com/search?q=") ("gmap" . "http://maps.google.com/mps?q=%s"))))
 '(org-log-done (quote note))
 '(org-log-into-drawer t)
 '(org-log-note-clock-out t)
 '(org-log-note-headings (quote ((done . "%T THREAD CLOSE") (state . "%t STATE CHANGE %S TO %s") (note . "%t ADD NOTE") (reschedule . "%t RESCHEDULED WHEN %S") (delschedule . "%t RMSCHEDULED WHEN %S") (redeadline . "%t REDEADLINE WHEN %S") (deldeadline . "%t RMSDEADLINE WHEN %S") (refile . "%t REFILED") (clock-out . ""))))
 '(org-log-redeadline (quote note))
 '(org-log-reschedule (quote note))
 '(org-log-state-notes-insert-after-drawers t)
 '(org-lowest-priority 70)
 '(org-modules (quote (org-bbdb org-crypt org-docview org-gnus org-id org-info org-habit org-inlinetask org-irc org-protocol org-w3m org-mouse org-annotate-file org-bookmark org-checklist org-choose org-collector org-contacts org-download org-passwords org-mairix org-sudoku orgtbl-sqlinsert org-track ox-freemind ox-rss org-depend org-eval org-git-link org-learn org-man org-toc)))
 '(org-priority-faces (quote ((65 . "RED") (66 . "YELLOW") (67 . "BLUE"))))
 '(org-read-date-force-compatible-dates nil)
 '(org-return-follows-link t)
 '(org-show-notification-handler (quote alert))
 '(org-startup-folded nil)
 '(org-tag-faces (quote (("work" . "YELLOW"))))
 '(org-time-stamp-custom-formats (quote ("<%Y-%m-%d %T>" . "<%Y-%m-%dT%H:%M %Z>")))
 '(org-todo-keyword-faces (quote (("TODO" . "RED") ("PCED" . "GREEN") ("HGUP" . "YELLOW") ("REDT" . "MAGNET") ("DONE" . "BLUE") ("ABDN" . "BLACK"))))
 '(org-todo-keywords (quote ((sequence "TODO(t!)" "HGUP(h!)" "PCED(p!)" "|" "REDT(r)" "DONE(d)" "ABDN(a)"))))
 '(org-use-property-inheritance nil)
 '(org-use-speed-commands t)
 '(paradox-github-token t)
 '(projectile-enable-caching t)
 '(projectile-indexing-method (quote native))
 '(read-file-name-completion-ignore-case t)
 '(savehist-mode t)
 '(scroll-bar-mode nil)
 '(send-mail-function (quote sendmail-send-it))
 '(speedbar-supported-extension-expressions (quote (".org" ".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".js" ".f\\(90\\|77\\|or\\)?" ".ad[abs]" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?" ".txt" ".css" ".php" ".conf" ".patch" ".diff" ".lua" ".sh")))
 '(speedbar-update-flag nil)
 '(time-stamp-format "%:y-%02m-%02d %02H:%02M:%02S %z")
 '(trash-directory "~/.emacs.d/trash")
 '(undo-tree-auto-save-history t)
 '(undo-tree-history-directory-alist (quote (("." . "~/.emacs.d/undo-tree"))))
 '(version-control t)
 '(w3m-default-save-directory "/tmp")
 '(w3m-fb-mode t)
 '(woman-fill-column 80))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(linum ((t (:foreground "cyan"))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "cyan"))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "red"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "dark orange"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "gold"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "green yellow"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "green"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "medium spring green"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "cyan"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "blue"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "dark violet"))))
 '(rainbow-delimiters-unmatched-face ((t (:foreground "OliveDrab2"))))
 '(success ((t (:foreground "#69821B")))))
;;; init.el ends here
